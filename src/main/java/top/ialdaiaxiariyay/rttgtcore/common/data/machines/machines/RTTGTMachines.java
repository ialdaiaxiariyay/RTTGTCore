package top.ialdaiaxiariyay.rttgtcore.common.data.machines.machines;

import org.gtlcore.gtlcore.GTLCore;
import org.gtlcore.gtlcore.common.data.GTLBlocks;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.data.RotationState;
import com.gregtechceu.gtceu.api.machine.MachineDefinition;
import com.gregtechceu.gtceu.api.machine.multiblock.PartAbility;
import com.gregtechceu.gtceu.api.machine.multiblock.WorkableElectricMultiblockMachine;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.api.recipe.GTRecipe;
import com.gregtechceu.gtceu.api.recipe.OverclockingLogic;
import com.gregtechceu.gtceu.common.data.GTRecipeModifiers;
import com.gregtechceu.gtceu.common.data.GTRecipeTypes;

import net.minecraft.network.chat.Component;

import top.ialdaiaxiariyay.rttgtcore.RTTGTCore;
import top.ialdaiaxiariyay.rttgtcore.api.registries.Registration;
import top.ialdaiaxiariyay.rttgtcore.common.data.GetRegistries;
import top.ialdaiaxiariyay.rttgtcore.common.data.RTTGTCreativeModeTabs;
import top.ialdaiaxiariyay.rttgtcore.common.data.machines.recipes.RTTGTRecipeTypes;

import static com.gregtechceu.gtceu.api.pattern.Predicates.blocks;
import static com.gregtechceu.gtceu.api.pattern.util.RelativeDirection.*;
import static com.gregtechceu.gtceu.common.data.GCyMBlocks.*;
import static com.gregtechceu.gtceu.common.data.GCyMRecipeTypes.*;
import static com.gregtechceu.gtceu.common.data.GTBlocks.*;
import static top.ialdaiaxiariyay.rttgtcore.api.registries.Registration.*;

@SuppressWarnings({ "Convert2MethodRef", "FunctionalExpressionCanBeFolded", "unused", "DataFlowIssue" })
public class RTTGTMachines {

    static {
        Registration.REGISTRATE.creativeModeTab(() -> RTTGTCreativeModeTabs.MACHINES_ITEM);
    }

    public static void init() {}

    public static final MachineDefinition LARGE_SHAPE_WORLD_VOID_PUMP = REGISTRATE.multiblock("large_shape_world_void_pump", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(CASING_BRONZE_BRICKS)
            .recipeType(RTTGTRecipeTypes.LARGE_SHAPE_WORLD_VOID_PUMP)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle
                    .aisle("           C          ", "           C          ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ")
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle("                      ", "                      ", "                      ", "                      ", "           F          ", "           F          ", "          CFC         ", "           F          ", "           F          ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "          CCC         ", "                      ", "          DDD         ", "        CCDDDCC       ", "          DDD         ", "        DD   DD       ", "       CDDEEEDDC      ", "        DD   DD       ", "      DD       DD     ", "     CDDE  E  EDDC    ", "      DD       DD     ", "     D           D    ", "    CDE   EEE   EDC   ", "     D           D    ", "    D             D   ", "    D             D   ", "    D             D   ", "    DE  EEEEEEE  ED   ", "     DDDDDDDDDDDDD    ")
                    .aisle("        D     D       ", "        D     D       ", "        D     D       ", "        D  F  D       ", "        D FEF D       ", "        D F F D       ", "        DCFEFCD       ", "        D F F D       ", "        D FCF D       ", "        D  F  D       ", "        D  C  D       ", "        D  C  D       ", "        D  C  D       ", "        D  C  D       ", "        D  C  D       ", "        DDDDDDD       ", "        CCCCCCC       ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "          DDD         ", "         CDDDC        ", "          DDD         ", "        DD   DD       ", "       CDDEEEDDC      ", "        DD   DD       ", "       D       D      ", "      CDEE E EEDC     ", "       D       D      ", "      D         D     ", "     CDE  EEE  EDC    ", "      D         D     ", "     D           D    ", "    CDE  E E E  EDC   ", "     D           D    ", "    D             D   ", "    D             D   ", "    D             D   ", "    DE EE  E  EE ED   ", "     DDDDDDDDDDDDD    ")
                    .aisle("                      ", "                      ", "           F          ", "          F F         ", "         F E F        ", "         F   F        ", "        CF E FC       ", "         F   F        ", "         F C F        ", "          FFF         ", "                      ", "                      ", "                      ", "                      ", "                      ", "        D     D       ", "        C     C       ", "                      ", "                      ", "                      ", "          DDD         ", "          DDD         ", "          DDD         ", "         D   D        ", "        CDEEEDC       ", "         D   D        ", "        D     D       ", "       CDE E EDC      ", "        D     D       ", "      DD       DD     ", "     CDDE EEE EDDC    ", "      DD       DD     ", "     D           D    ", "    CDE  E E E  EDC   ", "     D           D    ", "    D             D   ", "   CDE  E EEE E  EDC  ", "    D             D   ", "   D               D  ", "   D               D  ", "   D               D  ", "   D E E  EEE  E E D  ", "    DDDDDLLLLLDDDDD   ")
                    .aisle("                      ", "           F          ", "          F F         ", "         FC CF        ", "        F CEC F       ", "        F C C F       ", "       CF CEC FC      ", "        F C C F       ", "        F CCC F       ", "         FFFFF        ", "           F          ", "           F          ", "           F          ", "           F          ", "           F          ", "        D  F  D       ", "        C  D  C       ", "          DDD         ", "          DDD         ", "          DDD         ", "         DDDDD        ", "         D   D        ", "         D E D        ", "        D     D       ", "       CDE E EDC      ", "        D     D       ", "       D       D      ", "      CDE  E  EDC     ", "       D       D      ", "      D         D     ", "     CDE E E E EDC    ", "      D         D     ", "     D           D    ", "    CDE E  E  E EDC   ", "     D           D    ", "    D             D   ", "   CDE E E E E E EDC  ", "    D             D   ", "   D               D  ", "   D               D  ", "   D               D  ", "   D E E E E E E E D  ", "    DDDDDLLLLLDDDDD   ")
                    .aisle("CC         G        CC", " CC       FEF       CC", "  CC     F E F     CC ", "   CC   F  E  F   CC  ", "   CCC FEEEEEEEF CCC  ", "   C CCF   E   FCC C  ", "   C  CFEEEEEEEFC  C  ", "   C   F   E   F   C  ", "   C   FCCCECCCF   C  ", "   C    FFFEFFF    C  ", "   C    C FEF C    C  ", "   C    C FEF C    C  ", "   C    C FEF C    C  ", "   C    C FEF C    C  ", "   C    C FEF C    C  ", "   C    D FEF D    C  ", "   C    C DED C    C  ", "   C      DED      C  ", "   C      DED      C  ", "   C      DED      C  ", "   C     DDEDD     C  ", "   C     D E D     C  ", "   C     DEEED     C  ", "   C    D  E  D    C  ", "   CCCCCDEEEEEDCCCCC  ", "   C    D  E  D    C  ", "   C   D   E   D   C  ", "   CCCCDEEEEEEEDCCCC  ", "   C   D   E   D   C  ", "   C  D    E    D  C  ", "   CCCDEEEEEEEEEDCCC  ", "   C  D    E    D  C  ", "   C D     E     D C  ", "   CCDEEEEEEEEEEEDCC  ", "   C D     E     D C  ", "   CD      E      DC  ", "   CDEEEEEEEEEEEEEDC  ", "   CD      E      DC  ", "   D       E       D  ", "   D       E       D  ", "   D       E       D  ", "   D EEEEEEEEEEEEE D  ", "    DDDDDLL~LLDDDDD   ")
                    .aisle("                      ", "           F          ", "          F F         ", "         FC CF        ", "        F CEC F       ", "        F C C F       ", "       CF CEC FC      ", "        F C C F       ", "        F CCC F       ", "         FFFFF        ", "           F          ", "           F          ", "           F          ", "           F          ", "           F          ", "        D  F  D       ", "        C  D  C       ", "          DDD         ", "          DDD         ", "          DDD         ", "         DDDDD        ", "         D   D        ", "         D E D        ", "        D     D       ", "       CDE E EDC      ", "        D     D       ", "       D       D      ", "      CDE  E  EDC     ", "       D       D      ", "      D         D     ", "     CDE E E E EDC    ", "      D         D     ", "     D           D    ", "    CDE E  E  E EDC   ", "     D           D    ", "    D             D   ", "   CDE E E E E E EDC  ", "    D             D   ", "   D               D  ", "   D               D  ", "   D               D  ", "   D E E E E E E E D  ", "    DDDDDLLLLLDDDDD   ")
                    .aisle("                      ", "                      ", "           F          ", "          F F         ", "         F E F        ", "         F   F        ", "        CF E FC       ", "         F   F        ", "         F C F        ", "          FFF         ", "                      ", "                      ", "                      ", "                      ", "                      ", "        D     D       ", "        C     C       ", "                      ", "                      ", "                      ", "          DDD         ", "          DDD         ", "          DDD         ", "         D   D        ", "        CDEEEDC       ", "         D   D        ", "        D     D       ", "       CDE E EDC      ", "        D     D       ", "      DD       DD     ", "     CDDE EEE EDDC    ", "      DD       DD     ", "     D           D    ", "    CDE  E E E  EDC   ", "     D           D    ", "    D             D   ", "   CDE  E EEE E  EDC  ", "    D             D   ", "   D               D  ", "   D               D  ", "   D               D  ", "   D E E  EEE  E E D  ", "    DDDDDLLLLLDDDDD   ")
                    .aisle("        D     D       ", "        D     D       ", "        D     D       ", "        D  F  D       ", "        D FEF D       ", "        D F F D       ", "        DCFEFCD       ", "        D F F D       ", "        D FCF D       ", "        D  F  D       ", "        D  C  D       ", "        D  C  D       ", "        D  C  D       ", "        D  C  D       ", "        D  C  D       ", "        DDDDDDD       ", "        CCCCCCC       ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "          DDD         ", "         CDDDC        ", "          DDD         ", "        DD   DD       ", "       CDDEEEDDC      ", "        DD   DD       ", "       D       D      ", "      CDEE E EEDC     ", "       D       D      ", "      D         D     ", "     CDE  EEE  EDC    ", "      D         D     ", "     D           D    ", "    CDE  E E E  EDC   ", "     D           D    ", "    D             D   ", "    D             D   ", "    D             D   ", "    DE EE  E  EE ED   ", "     DDDDDDDDDDDDD    ")
                    .aisle("                      ", "                      ", "                      ", "                      ", "           F          ", "           F          ", "          CFC         ", "           F          ", "           F          ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "          CCC         ", "                      ", "          DDD         ", "        CCDDDCC       ", "          DDD         ", "        DD   DD       ", "       CDDEEEDDC      ", "        DD   DD       ", "      DD       DD     ", "     CDDE  E  EDDC    ", "      DD       DD     ", "     D           D    ", "    CDE   EEE   EDC   ", "     D           D    ", "    D             D   ", "    D             D   ", "    D             D   ", "    DE  EEEEEEE  ED   ", "     DDDDDDDDDDDDD    ")
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle("           C          ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ", "                      ")
                    .where('~', Predicates.controller(blocks(definition.getBlock())))
                    .where(' ', Predicates.any())
                    .where("C", Predicates.blocks(GetRegistries.getBlock("gtceu:stainless_steel_frame")))
                    .where("D", Predicates.blocks(GetRegistries.getBlock("gtceu:stable_machine_casing")))
                    .where("L", Predicates.blocks(GetRegistries.getBlock("gtceu:stable_machine_casing"))
                            .setMinGlobalLimited(10)
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2)))
                    .where("E", Predicates.blocks(GetRegistries.getBlock("gtceu:ptfe_pipe_casing")))
                    .where("F", Predicates.blocks(GetRegistries.getBlock("gtceu:ev_machine_casing")))
                    .where("G", Predicates.blocks(GetRegistries.getBlock("rttgtcore:void_world_block")))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_stable_titanium"),
                    GTCEu.id("block/multiblock/cleanroom"), false)
            .tooltips(Component.translatable("block.rttgtcore.large_shape_world_void_pump.tooltip"))
            .register();

    public static final MachineDefinition Compressed_Block_Transmutation_Chamber = REGISTRATE.multiblock("compressed_block_transmutation_chamber", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(() -> GetRegistries.getBlock("gtlcore:aluminium_bronze_casing"))
            .recipeType(RTTGTRecipeTypes.Compressed_Block_Transmutation_Chamber)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "AAAAA", "BBBBB", "BBBBB", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "ACCCA", "B   B", "B   B", "ACCCA", "AAAAA")
                    .aisle("AAAAA", "ACCCA", "B A B", "B A B", "ACCCA", "AA~AA")
                    .aisle("AAAAA", "ACCCA", "B   B", "B   B", "ACCCA", "AAAAA")
                    .aisle("AAAAA", "AAAAA", "BBBBB", "BBBBB", "AAAAA", "AAAAA")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GetRegistries.getBlock("gtlcore:aluminium_bronze_casing"))
                            .setMinGlobalLimited(10)
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2)))
                    .where("C", Predicates.blocks(GetRegistries.getBlock("kubejs:shining_obsidian")))
                    .where("B", Predicates.blocks(GetRegistries.getBlock("gtceu:tempered_glass")))
                    .build())
            .workableCasingRenderer(RTTGTCore.id("block/casings/aluminium_bronze_casing"),
                    GTCEu.id("block/multiblock/cleanroom"), false)
            .tooltips(Component.translatable("block.rttgtcore.compressed_block_transmutation_chamber.tooltip"))
            .register();

    public static final MachineDefinition THERMOMAGNETIC_COOLING_GENERATOR = REGISTRATE.multiblock("thermomagnetic_cooling_generator", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(() -> GetRegistries.getBlock("gtceu:lv_machine_casing"))
            .recipeType(RTTGTRecipeTypes.THERMOMAGNETIC_COOLING_GENERATOR)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("     ", " AAA ", " ABA ", " AAA ", "     ", "     ", "     ")
                    .aisle(" AAA ", "A D A", "ACECA", "A D A", " AAA ", "     ", "     ")
                    .aisle(" AAA ", "A D A", "ACECA", "A D A", " AAA ", "     ", "     ")
                    .aisle(" AAA ", "A D A", "ACECA", "A D A", " ABA ", "  B  ", "  B  ")
                    .aisle(" AAA ", "A D A", "ACECA", "A D A", " AAA ", "     ", "  B  ")
                    .aisle(" AAA ", "A D A", "ACECA", "A D A", " AAA ", "     ", "  B  ")
                    .aisle("     ", " AAA ", " ABA ", " AAA ", "     ", "     ", "  B  ")
                    .aisle("     ", " BBB ", " B~B ", " BBB ", "  B  ", "  B  ", "  B  ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("B", Predicates.blocks(GetRegistries.getBlock("gtceu:lv_machine_casing"))
                            .setMinGlobalLimited(10)
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.OUTPUT_ENERGY).setMaxGlobalLimited(2)))
                    .where("E", Predicates.blocks(GetRegistries.getBlock("minecraft:redstone_block")))
                    .where("D", Predicates.blocks(GetRegistries.getBlock("minecraft:blue_ice")))
                    .where("A", Predicates.blocks(GetRegistries.getBlock("minecraft:iron_block")))
                    .where("C", Predicates.blocks(GetRegistries.getBlock("minecraft:magma_block")))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/lv/side"),
                    GTCEu.id("block/multiblock/fusion_reactor"), false)
            .tooltips(Component.translatable("block.rttgtcore.thermomagnetic_cooling_generator.tooltip"))
            .register();

    public static final MachineDefinition GENERAL_ENERGY_FURNACE = REGISTRATE.multiblock("general_energy_furnace", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(CASING_HIGH_TEMPERATURE_SMELTING)
            .recipeType(GTRecipeTypes.BLAST_RECIPES)
            .recipeType(ALLOY_BLAST_RECIPES)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .recipeModifier((machine, recipe, params, result) -> {
                GTRecipe recipe1 = recipe.copy();
                recipe1.duration = 0;
                recipe1 = GTRecipeModifiers.fastParallel(machine, recipe1, 2147483647, false).getFirst();
                return recipe1;
            })
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaaaaaa", "ccccccc", "ccccccc", "ccccccc", "eeeeeee", "ccccccc", "ccccccc", "ccccccc", "aaaaaaa")
                    .aisle("aaaaaaa", "c     c", "c     c", "c     c", "e     e", "c     c", "c     c", "c     c", "aaaaaaa")
                    .aisle("aaaaaaa", "c     c", "c     c", "c     c", "e     e", "c     c", "c     c", "c     c", "aaaaaaa")
                    .aisle("aaaaaaa", "c     c", "c     c", "c     c", "e  f  e", "c     c", "c     c", "c     c", "aaaaaaa")
                    .aisle("aaaaaaa", "c     c", "c     c", "c     c", "e     e", "c     c", "c     c", "c     c", "aaaaaaa")
                    .aisle("aaaaaaa", "c     c", "c     c", "c     c", "e     e", "c     c", "c     c", "c     c", "aaaaaaa")
                    .aisle("aaa~aaa", "ccccccc", "ccccccc", "ccccccc", "eeeeeee", "ccccccc", "ccccccc", "ccccccc", "aaaaaaa")
                    .where('~', Predicates.controller(blocks(definition.getBlock())))
                    .where(' ', Predicates.any())
                    .where("c", Predicates.blocks(GetRegistries.getBlock("gtceu:cleanroom_glass")))
                    .where("a", Predicates.blocks(GetRegistries.getBlock("gtceu:high_temperature_smelting_casing"))
                            .setMinGlobalLimited(10)
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2)))
                    .where("e", Predicates.blocks(GetRegistries.getBlock("gtceu:heat_vent")))
                    .where("f", Predicates.heatingCoils())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/high_temperature_smelting_casing"),
                    GTCEu.id("block/multiblock/fusion_reactor"), false)
            .tooltips(Component.translatable("block.rttgtcore.general_energy_furnace.tooltip"))
            .register();

    public static final MachineDefinition FIGURE_FACTORY = REGISTRATE.multiblock("figure_factory", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTLBlocks.DIMENSIONALLY_TRANSCENDENT_CASING)
            .recipeType(RTTGTRecipeTypes.FIGURE_FACTORY)
            .recipeModifiers(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .recipeModifier((machine, recipe, params, result) -> {
                GTRecipe recipe1 = recipe.copy();
                recipe1 = GTRecipeModifiers.fastParallel(machine, recipe1, 64, false).getFirst();
                return recipe1;
            })
            .tooltips(Component.translatable("block.rttgtcore.figure_factory.tooltip.1"))
            .tooltips(Component.translatable("block.rttgtcore.figure_factory.tooltip.2"))
            .tooltips(Component.translatable("block.rttgtcore.figure_factory.tooltip.3"))
            .tooltips(Component.translatable("block.rttgtcore.figure_factory.tooltip.4"))
            .tooltips(Component.translatable("block.rttgtcore.figure_factory.tooltip.5"))
            .pattern(definition -> FactoryBlockPattern.start(FRONT, UP, LEFT)
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AAAAAAAAAAAAAAAAAAAAA", "                     ", "                     ", "                     ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "ACCCCCCCCCCCCCCCCCCCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACCCCCCCCCCCCCCCCCCCA", "ADDDDDDDDDDDDDDDDDDDA", "                     ", "                     ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B D   D   D   D   D B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDDDDDDDDDDDDDDDDDDA", "                     ", "                     ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B D   D   D   D   D B", "B D   D   D   D   D B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDDDDDDDDDDDDDDDDDDA", "ADDDDDDDDDDDDDDDDDDDA", "                     ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B                   B", "B D   D   D   D   D B", "B D   D   D   D   D B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDDDDDDDDDDDDDDDDDDA", "                     ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B                   B", "B                   B", "B D   D   D   D   D B", "B D   D   D   D   D B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDDDDDDDDDDDDDDDDDDA", "ADDDDDDDDDDDDDDDDDDDA", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B G   G   G   G   G B", "B G   G   G   G   G B", "B G   G   G   G   G B", "B D F D F D F D F D B", "B D   D   D   D   D B", "B                   B", "B                   B", "B                   B", "B H   H   H   H   H B", "B H   H   H   H   H B", "B H   H   H   H   H B", "ADDDDDDDDDDDDDDDDDDDA", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B                   B", "B                   B", "B                   B", "B                   B", "B I   I   I   I   I B", "B                   B", "B                   B", "B H   H   H   H   H B", "B H   H   H   H   H B", "B                   B", "B                   B", "ADDDDDDDDDDDDDDDDDDDA", "ADDDJDDDJDDDJDDDJDDDA")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B  KKFFKKFFKKFFKKFFKK", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B H   H   H   H   H B", "B H   H   H   H   H B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDJDJDJDJDJDJDJDJDDA")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "LKKIIKKIIKKIIKKIIKKFB", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B H   H   H   H   H B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDDJDDDJDDDJDDDJDDDA")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "LKKKKKKKKKKKKKKKKKKKB", "B K   K   K   K   K B", "B K   K   K   K   K B", "B K   K   K   K   K B", "B M   M   M   M   M B", "B                   B", "B J F J F J F J F J B", "B                   B", "B F   F   F   F   F B", "B F   F   F   F   F B", "B F   F   F   F   F B", "B F   F   F   F   F B", "AJJJJJJJJJJJJJJJJJJJ~")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "LKKIIKKIIKKIIKKIIKKFB", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B H   H   H   H   H B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDDJDDDJDDDJDDDJDDDA")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B  KKFFKKFFKKFFKKFFKK", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B H   H   H   H   H B", "B H   H   H   H   H B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDJDJDJDJDJDJDJDJDDA")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B                   B", "B                   B", "B                   B", "B                   B", "B I   I   I   I   I B", "B                   B", "B                   B", "B H   H   H   H   H B", "B H   H   H   H   H B", "B                   B", "B                   B", "ADDDDDDDDDDDDDDDDDDDA", "ADDDJDDDJDDDJDDDJDDDA")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B G   G   G   G   G B", "B G   G   G   G   G B", "B G   G   G   G   G B", "B E   E   E   E   E B", "B E   E   E   E   E B", "B                   B", "B                   B", "B                   B", "B H   H   H   H   H B", "B H   H   H   H   H B", "B H   H   H   H   H B", "ADDDDDDDDDDDDDDDDDDDA", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B                   B", "B                   B", "B E   E   E   E   E B", "B E F E F E F E F E B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDDDDDDDDDDDDDDDDDDA", "ADDDDDDDDDDDDDDDDDDDA", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B                   B", "B E   E   E   E   E B", "B E   E   E   E   E B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDDDDDDDDDDDDDDDDDDA", "                     ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B E   E   E   E   E B", "B E   E   E   E   E B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDDDDDDDDDDDDDDDDDDA", "ADDDDDDDDDDDDDDDDDDDA", "                     ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "B E   E   E   E   E B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "B                   B", "ADDDDDDDDDDDDDDDDDDDA", "                     ", "                     ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "ACCCCCCCCCCCCCCCCCCCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACBBBBBBBBBBBBBBBBBCA", "ACCCCCCCCCCCCCCCCCCCA", "ADDDDDDDDDDDDDDDDDDDA", "                     ", "                     ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AABBBBBBBBBBBBBBBBBAA", "AAAAAAAAAAAAAAAAAAAAA", "                     ", "                     ", "                     ", "                     ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("G", Predicates.blocks(GetRegistries.getBlock("gtceu:magnetohydrodynamicallyconstrainedstarmatter_frame")))
                    .where("J", Predicates.blocks(GetRegistries.getBlock("gtlcore:component_assembly_line_casing_max")))
                    .where("L", Predicates.blocks(GetRegistries.getBlock("gtlcore:dimensionally_transcendent_casing"))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setPreviewCount(1)))
                    .where("M", Predicates.blocks(GetRegistries.getBlock("kubejs:create_aggregatione_core")))
                    .where("E", Predicates.blocks(GetRegistries.getBlock("gtlcore:molecular_casing")))
                    .where("H", Predicates.blocks(GetRegistries.getBlock("kubejs:neutronium_pipe_casing")))
                    .where("F", Predicates.blocks(GetRegistries.getBlock("kubejs:dimension_creation_casing")))
                    .where("K", Predicates.blocks(GetRegistries.getBlock("gtlcore:create_casing")))
                    .where("B", Predicates.blocks(GetRegistries.getBlock("gtlcore:infinity_glass")))
                    .where("C", Predicates.blocks(GetRegistries.getBlock("gtlcore:manipulator")))
                    .where("A", Predicates.blocks(GetRegistries.getBlock("gtlcore:dimensionally_transcendent_casing")))
                    .where("D", Predicates.blocks(GetRegistries.getBlock("gtlcore:dimension_connection_casing")))
                    .where("I", Predicates.blocks(GetRegistries.getBlock("kubejs:create_hpca_component")))
                    .where(' ', Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/dimensionally_transcendent_casing"),
                    GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
}
